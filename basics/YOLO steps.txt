If you want to perform object detection on a video, here's a step-by-step guide on what you might want to learn and do:

1. **Understand the Basics of Python:**
   - Make sure you have a good understanding of Python programming as it will be the primary language used for coding in the field of computer vision.

2. **Learn Basic Video Processing:**
   - Familiarize yourself with basic video processing concepts using libraries like OpenCV in Python. Understand how to read, write, and manipulate video files.

3. **Introduction to Computer Vision:**
   - Gain a basic understanding of computer vision concepts, including image processing, feature extraction, and basic object detection principles.

4. **Study Object Detection Basics:**
   - Learn about object detection algorithms, including the concepts of bounding boxes, object localization, and class prediction.

5. **Learn YOLO (You Only Look Once) Algorithm:**
   - YOLO is a popular and efficient object detection algorithm. Start by understanding the YOLO algorithm, its architecture, and how it performs object detection in real-time.

6. **Choose a YOLO Version:**
   - Decide on the YOLO version you want to use. YOLOv4 or YOLOv3 might be suitable choices depending on your requirements. Check the official repository or documentation for the selected version to understand its capabilities.

7. **Setup Environment:**
   - Install the necessary libraries and frameworks. For YOLO, you might need to set up OpenCV, NumPy, and the specific version of YOLO you are using.

8. **Download Pre-trained Weights:**
   - YOLO models are often pre-trained on large datasets. Download pre-trained weights for the YOLO version you've chosen. These weights act as a starting point for your model.

9. **Configure YOLO for Your Task:**
   - Modify the YOLO configuration file to suit your specific object detection task. Define the classes you want to detect and configure other parameters accordingly.

10. **Prepare Your Video Dataset:**
    - Annotate the video frames with bounding boxes around the objects you want to detect. This is a crucial step in training the model.

11. **Train the YOLO Model:**
    - Train the YOLO model on your annotated video dataset. This involves providing the model with your dataset, specifying the configuration, and running the training process.

12. **Evaluate and Fine-Tune:**
    - Evaluate the trained model on a separate validation set to ensure it's performing well. Fine-tune the model if needed, adjusting hyperparameters for better performance.

13. **Perform Object Detection on Video:**
    - Once the model is trained and evaluated, use it to perform object detection on your video. This involves processing each frame, detecting objects, and visualizing the results.

14. **Post-Processing and Visualization:**
    - Implement post-processing steps such as non-maximum suppression (NMS) to refine the results. Visualize the detected objects on the video frames.

15. **Optimization (Optional):**
    - Depending on the application and performance requirements, you may need to optimize the model for real-time processing.

16. **Experiment and Iterate:**
    - Experiment with different configurations, parameters, and techniques to improve the performance of your object detection model. Iterate on the process based on the results.

Remember, practical hands-on experience is crucial for learning. Work on small projects and gradually increase the complexity of your tasks as you become more comfortable with the concepts and tools involved.